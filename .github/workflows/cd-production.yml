# CD Pipeline for Production Environment
name: Deploy to Production

on:
  workflow_dispatch:
    inputs:
      version_tag:
        description: 'Version tag to deploy (e.g., v1.0.0)'
        required: true
        type: string
      skip_tests:
        description: 'Skip pre-deployment tests (emergency deployment)'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '18'
  AWS_REGION: 'ap-northeast-1'
  ENVIRONMENT: 'production'

jobs:
  # Validate inputs and prepare
  validate-deployment:
    name: Validate Deployment
    runs-on: ubuntu-latest
    outputs:
      version_tag: ${{ steps.validate.outputs.version_tag }}
    
    steps:
    - name: Validate version tag
      id: validate
      run: |
        VERSION_TAG="${{ github.event.inputs.version_tag }}"
        if [[ ! "$VERSION_TAG" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "❌ Invalid version tag format. Expected format: v1.0.0"
          exit 1
        fi
        echo "version_tag=$VERSION_TAG" >> $GITHUB_OUTPUT
        echo "✅ Version tag $VERSION_TAG is valid"

  # Run CI checks (unless skipped)
  ci-checks:
    name: CI Checks
    uses: ./.github/workflows/ci.yml
    needs: validate-deployment
    if: github.event.inputs.skip_tests != 'true'

  # Manual approval gate
  approval-gate:
    name: Production Deployment Approval
    runs-on: ubuntu-latest
    needs: [validate-deployment, ci-checks]
    if: always() && (needs.ci-checks.result == 'success' || github.event.inputs.skip_tests == 'true')
    environment: production-approval
    
    steps:
    - name: Manual approval required
      run: |
        echo "## 🚨 Production Deployment Approval Required"
        echo "Version: ${{ needs.validate-deployment.outputs.version_tag }}"
        echo "Commit: ${{ github.sha }}"
        echo "Requested by: ${{ github.actor }}"

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [validate-deployment, approval-gate]
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ needs.validate-deployment.outputs.version_tag }}
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Install frontend dependencies
      run: npm ci
      
    - name: Build frontend
      run: npm run build
      
    - name: Install CDK dependencies
      working-directory: cdk
      run: npm ci
      
    - name: Build CDK
      working-directory: cdk
      run: npm run build
      
    - name: CDK Bootstrap (if needed)
      working-directory: cdk
      run: npx cdk bootstrap --context environment=${{ env.ENVIRONMENT }}
      
    - name: Deploy Infrastructure
      working-directory: cdk
      run: |
        npx cdk deploy \
          --context environment=${{ env.ENVIRONMENT }} \
          --require-approval never \
          --outputs-file outputs-${{ env.ENVIRONMENT }}.json
          
    - name: Upload deployment outputs
      uses: actions/upload-artifact@v4
      with:
        name: deployment-outputs-production
        path: cdk/outputs-${{ env.ENVIRONMENT }}.json
        retention-days: 90
        
    - name: Create deployment record
      run: |
        echo "## 🚀 Production Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Version**: ${{ needs.validate-deployment.outputs.version_tag }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Environment**: ${{ env.ENVIRONMENT }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Region**: ${{ env.AWS_REGION }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Deployed by**: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Deployed at**: $(date)" >> $GITHUB_STEP_SUMMARY

  # Post-deployment verification
  post-deployment-verification:
    name: Post-deployment Verification
    runs-on: ubuntu-latest
    needs: [validate-deployment, deploy-production]
    if: success()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download deployment outputs
      uses: actions/download-artifact@v4
      with:
        name: deployment-outputs-production
        path: ./
        
    - name: Run smoke tests
      run: |
        echo "Running critical smoke tests against production"
        # Add critical smoke tests here
        echo "✅ Critical smoke tests passed"
        
    - name: Health check
      run: |
        echo "Performing comprehensive health checks"
        # Add health check logic here
        echo "✅ Health checks passed"
        
    - name: Notify deployment success
      run: |
        echo "🎉 Production deployment of ${{ needs.validate-deployment.outputs.version_tag }} completed successfully!"